// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalGames(): i32 {
    let value = this.get("totalGames");
    return value!.toI32();
  }

  set totalGames(value: i32) {
    this.set("totalGames", Value.fromI32(value));
  }

  get gamesWon(): i32 {
    let value = this.get("gamesWon");
    return value!.toI32();
  }

  set gamesWon(value: i32) {
    this.set("gamesWon", Value.fromI32(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value!.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalClaimed(): BigInt {
    let value = this.get("totalClaimed");
    return value!.toBigInt();
  }

  set totalClaimed(value: BigInt) {
    this.set("totalClaimed", Value.fromBigInt(value));
  }

  get netProfit(): BigInt {
    let value = this.get("netProfit");
    return value!.toBigInt();
  }

  set netProfit(value: BigInt) {
    this.set("netProfit", Value.fromBigInt(value));
  }
}

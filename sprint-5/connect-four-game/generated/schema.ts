// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Game must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Game", id.toString(), this);
    }
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betAmount(): BigInt | null {
    let value = this.get("betAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set betAmount(value: BigInt | null) {
    if (!value) {
      this.unset("betAmount");
    } else {
      this.set("betAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get player1(): Bytes | null {
    let value = this.get("player1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set player1(value: Bytes | null) {
    if (!value) {
      this.unset("player1");
    } else {
      this.set("player1", Value.fromBytes(<Bytes>value));
    }
  }

  get player2(): Bytes | null {
    let value = this.get("player2");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set player2(value: Bytes | null) {
    if (!value) {
      this.unset("player2");
    } else {
      this.set("player2", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get moves(): Array<BigInt> | null {
    let value = this.get("moves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set moves(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("moves");
    } else {
      this.set("moves", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get nextPlayer(): Bytes | null {
    let value = this.get("nextPlayer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nextPlayer(value: Bytes | null) {
    if (!value) {
      this.unset("nextPlayer");
    } else {
      this.set("nextPlayer", Value.fromBytes(<Bytes>value));
    }
  }

  get winner(): Bytes | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromBytes(<Bytes>value));
    }
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (!value) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(<BigInt>value));
    }
  }

  get gameId(): BigInt | null {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt | null) {
    if (!value) {
      this.unset("gameId");
    } else {
      this.set("gameId", Value.fromBigInt(<BigInt>value));
    }
  }

  get player(): i32 {
    let value = this.get("player");
    return value!.toI32();
  }

  set player(value: i32) {
    this.set("player", Value.fromI32(value));
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConnectFourInterface extends ethers.utils.Interface {
  functions: {
    "boardIndex(uint256,uint256)": FunctionFragment;
    "claimReward(uint256,address,uint256,uint256,uint8)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "initializeGame()": FunctionFragment;
    "maxBetAmount()": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "playMove(uint256,uint256)": FunctionFragment;
    "startGame(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boardIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initializeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playMove",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "boardIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;

  events: {
    "GameInitialized(uint256,address,uint256)": EventFragment;
    "GameStarted(uint256,address)": EventFragment;
    "RewardClaimed(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export type GameInitializedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gameId: BigNumber;
    player1: string;
    betAmount: BigNumber;
  }
>;

export type GameStartedEvent = TypedEvent<
  [BigNumber, string] & { gameId: BigNumber; player2: string }
>;

export type RewardClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    gameId: BigNumber;
    winner: string;
    recipient: string;
    rewardAmount: BigNumber;
  }
>;

export class ConnectFour extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConnectFourInterface;

  functions: {
    boardIndex(
      _col: BigNumberish,
      _row: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      _gameId: BigNumberish,
      _recipient: string,
      _startingWinDiscCol: BigNumberish,
      _startingWinDiscRow: BigNumberish,
      _direction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, boolean] & {
        player1: string;
        player2: string;
        betAmount: BigNumber;
        status: number;
        isPlayer1Turn: boolean;
      }
    >;

    initializeGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    playMove(
      _gameId: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startGame(
      _gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  boardIndex(
    _col: BigNumberish,
    _row: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    _gameId: BigNumberish,
    _recipient: string,
    _startingWinDiscCol: BigNumberish,
    _startingWinDiscRow: BigNumberish,
    _direction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  games(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, boolean] & {
      player1: string;
      player2: string;
      betAmount: BigNumber;
      status: number;
      isPlayer1Turn: boolean;
    }
  >;

  initializeGame(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  playMove(
    _gameId: BigNumberish,
    _col: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startGame(
    _gameId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    boardIndex(
      _col: BigNumberish,
      _row: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _gameId: BigNumberish,
      _recipient: string,
      _startingWinDiscCol: BigNumberish,
      _startingWinDiscRow: BigNumberish,
      _direction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, boolean] & {
        player1: string;
        player2: string;
        betAmount: BigNumber;
        status: number;
        isPlayer1Turn: boolean;
      }
    >;

    initializeGame(overrides?: CallOverrides): Promise<BigNumber>;

    maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    playMove(
      _gameId: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(_gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GameInitialized(uint256,address,uint256)"(
      gameId?: null,
      player1?: null,
      betAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gameId: BigNumber; player1: string; betAmount: BigNumber }
    >;

    GameInitialized(
      gameId?: null,
      player1?: null,
      betAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gameId: BigNumber; player1: string; betAmount: BigNumber }
    >;

    "GameStarted(uint256,address)"(
      gameId?: null,
      player2?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { gameId: BigNumber; player2: string }
    >;

    GameStarted(
      gameId?: null,
      player2?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { gameId: BigNumber; player2: string }
    >;

    "RewardClaimed(uint256,address,address,uint256)"(
      gameId?: null,
      winner?: null,
      recipient?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        gameId: BigNumber;
        winner: string;
        recipient: string;
        rewardAmount: BigNumber;
      }
    >;

    RewardClaimed(
      gameId?: null,
      winner?: null,
      recipient?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        gameId: BigNumber;
        winner: string;
        recipient: string;
        rewardAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    boardIndex(
      _col: BigNumberish,
      _row: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _gameId: BigNumberish,
      _recipient: string,
      _startingWinDiscCol: BigNumberish,
      _startingWinDiscRow: BigNumberish,
      _direction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initializeGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    playMove(
      _gameId: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startGame(
      _gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boardIndex(
      _col: BigNumberish,
      _row: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _gameId: BigNumberish,
      _recipient: string,
      _startingWinDiscCol: BigNumberish,
      _startingWinDiscRow: BigNumberish,
      _direction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeGame(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playMove(
      _gameId: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      _gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
